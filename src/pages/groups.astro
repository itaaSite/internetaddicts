---
import { marked } from "marked";

import { getCollection } from "astro:content";
import Layout from "../layout/Layout.astro";

const groups = await getCollection("groups");
const groupsCounter = (await getCollection("groups")).length;

const dayOrder = {
  Понедельник: 1,
  Вторник: 2,
  Среда: 3,
  Четверг: 4,
  Пятница: 5,
  Суббота: 6,
  Воскресенье: 7,
  Спонтанно: 8,
};

const someDate = "2023-04-25";

function sortGroupsByDay(groups) {
  return groups
    .sort((a, b) => {
      const t1 = someDate + a.data.dateTime;
      const t2 = someDate + b.data.dateTime;
      return new Date(t2).getMilliseconds() - new Date(t1).getMilliseconds();
    })
    .sort((a, b) => {
      return dayOrder[a.data.when] - dayOrder[b.data.when];
    });
}
---

<Layout
  title={`Онлайн собрания и Офлайн`}
  desc={`Время встреч для анонимных интернет-зависимых. Собраний (${groupsCounter})`}
>
  <h4 class="text-2xl text-gray-700 font-medium">
    Онлайн-группы ({groups.filter(f => f.data.type === "Онлайн").length})
  </h4>

  <div class="grid grid-cols-1 items-start md:grid-cols-2 lg:grid-cols-3 gap-5">
    {
      groups &&
        sortGroupsByDay(groups.filter(f => f.data.type === "Онлайн")).map(
          group => (
            <div class="p-4 bg-white rounded-lg ring-1 ring-gray-100">
              <div class="flex flex-col gap-3">
                <div class="flex items-center justify-between gap-2 flex-wrap">
                  <h4 class="font-bold text-lg">{group.data.title}</h4>
                </div>

                <p class="font-medium">
                  <span class="underline underline-offset-4">
                    {group.data.when}
                  </span>{" "}
                  <span class="underline underline-offset-4">
                    {group.data.dateTime}
                  </span>
                </p>
                <p set:html={marked(group.body)} />

                <a
                  href={group.data.link}
                  class="text-center py-1 px-2 ring-1 ring-green-200 rounded-md bg-green-400 text-white hover:bg-gray-300"
                >
                  Войти в чат
                </a>
              </div>
            </div>
          ),
        )
    }
  </div>
  <h4 class="text-2xl text-gray-700 font-medium">
    Живые группы ({groups.filter(f => f.data.type === "Живая").length})
  </h4>
  <div class="grid grid-cols-1 items-start md:grid-cols-2 lg:grid-cols-3 gap-5">
    {
      groups &&
        sortGroupsByDay(groups.filter(f => f.data.type === "Живая")).map(
          group => (
            <div class="p-4 bg-white rounded-lg ring-1 ring-gray-100">
              <div class="flex flex-col gap-3">
                <div class="flex items-center justify-between gap-2 flex-wrap">
                  <h4 class="font-bold text-lg">{group.data.title}</h4>
                </div>

                <p class="font-medium">
                  <span class="underline underline-offset-4">
                    {group.data.when}
                  </span>{" "}
                  <span class="underline underline-offset-4">
                    {group.data.dateTime}
                  </span>
                </p>
                <p set:html={marked(group.body)} />

                <a
                  href={group.data.link}
                  class="text-center py-1 px-2 ring-1 ring-green-200 rounded-md bg-green-400 text-white hover:bg-gray-300"
                >
                  Войти в чат
                </a>
              </div>
            </div>
          ),
        )
    }
  </div>
</Layout>
