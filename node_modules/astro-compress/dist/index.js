import{minify as n}from"csso";import{files as c}from"files-pipe";import o from"files-pipe/dist/lib/deepmerge.js";import d from"files-pipe/dist/options/index.js";import{minify as l}from"html-minifier-terser";import m from"sharp";import{optimize as h}from"svgo";import{minify as y}from"terser";import w from"./lib/format-bytes.js";import b from"./lib/sharp-read.js";import p from"./options/index.js";var I=(e={})=>{for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&e[r]===!0&&(e[r]=p[r]);e=o(p,e);const i=new Set;if(typeof e.path<"u"&&(e.path instanceof Array||e.path instanceof Set))for(const r of e.path)i.add(r);return{name:"astro-compress",hooks:{"astro:build:done":async({dir:r})=>{i.size||i.add(r);for(const[s,f]of Object.entries(e))if(f)for(const u of i)await(await(await(await new c(e.logger).in(u)).by(typeof e.map=="object"?e.map[s]:"")).not(e.exclude)).pipe(o(e.pipe,{wrote:async t=>{switch(s){case"css":return n(t.buffer.toString(),f).css;case"html":return await l(t.buffer.toString(),f);case"js":{const{code:a}=await y(t.buffer.toString(),f);return a||t.buffer}case"img":return b(f,t);case"svg":{const{data:a}=h(t.buffer.toString(),f);return typeof a<"u"?a:t.buffer}default:return t.buffer}},read:async t=>{switch(s){case"img":{const{format:a}=await m(t.inputPath).metadata();return m(t.inputPath,{failOn:"none",sequentialRead:!0,unlimited:!0,animated:a==="webp"||a==="gif"})}default:return await d.pipe.read(t)}},fulfilled:async t=>t.files>0?`Successfully compressed a total of ${t.files} ${s.toUpperCase()} ${t.files===1?"file":"files"} for ${await w(t.info.total)}.`:!1}))}}}};export{I as default};
